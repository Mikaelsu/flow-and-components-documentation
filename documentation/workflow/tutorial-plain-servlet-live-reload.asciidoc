---
title: Live Reload in Web Applications
order: 1
layout: page
---

= Live Reload in Web Applications

During application development the code changes happen frequently. There are various
tools available which allows to speed up the development process and a avoid 
web application restart every time.

Here is some list of such tools:
- `scanIntervalSeconds` configuration parameter may be used in case of Jetty Maven Plugin
- commercial https://www.jrebel.com/[JRebel tool] may be used with any Java application including web applications
- HostSwapAgent[http://hotswapagent.org/] also may be used with any Java applicaiton

HostSwapAgent has issues with existing route target reloading and we don't 
recommend to use it until it's fixed.

== Java modifications that applied automatically

Basically all Java code modifications are applied automatically:
- changes in the internal application logic
- routes modification (such as add a new view (route), update the route path, remove a view)

Jetty Maven Plugin performs complete application restart and it allows to apply
also changes made to custom component (`PolymerTemplate` subclasses): add/change/remove.

During those changes the session is not preserved.

JRebel tool only applies changes in the binaries, as a result:
- it works faster
- it doesn't handle properly newly added custom components 

JRebel preserves the session.

== Frontend resources modifications

As noted in the previous section it's possible to add a new `PolymerTemplate` class
in your application with already existing or new template module `.js` file.
So if you use Jetty Maven Plugin the working scenarios are:
- add a new CSS import (as a frontend resource and use it in Java via `@CssImport` annotation) 
- add a new frontend JS module file (and use it with a Java class)
- modify the existing frontend resource (JS module or imported CSS file) 

In the latter case webpack dev server cares about changes made in the JS module only.

JRebel doesn't support new template creation or adding a new frontend resource 
(CSS or JS module via annotation) to an existing class. So the only working scenario
with JREbel is modification of existing resource which is handed by webpack dev
server.  

== Changes that requires application restart

All changes described above applied automatically only assuming you don't add
new dependencies to the project. The modifications which rely anyhow on updated
classpath dependencies requires the application restart.
 